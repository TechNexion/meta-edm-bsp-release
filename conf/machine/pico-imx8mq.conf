#@TYPE: Machine
#@NAME: PICO-IMX8M
#@SOC: i.MX8MQ
#@DESCRIPTION: Machine configuration for PICO-IMX8M
#@MAINTAINER: Richard Hu <richard.hu@technexion.com>

MACHINEOVERRIDES =. "mx8:mx8m:mx8mq:"

require conf/machine/include/imx-base.inc
require conf/machine/include/arm/arch-arm64.inc

#BBMASK += "meta-fsl-bsp-release/imx/meta-bsp/classes/image_types_fsl.bbclass"

MACHINE_FEATURES += " pci wifi bluetooth"

MACHINE_SOCARCH_FILTER_append_mx8mq = "virtual/libopenvg virtual/libgles1 virtual/libgles2 virtual/egl virtual/mesa virtual/libgl virtual/libg2d"

PREFERRED_PROVIDER_virtual/kernel ?= "linux-tn-imx"
PREFERRED_PROVIDER_virtual/kernel_mx8mq = "linux-tn-imx"

# Add kernel modules
MACHINE_EXTRA_RRECOMMENDS += "\
    kernel-module-qcacld-tn \
"

KERNEL_DEVICETREE ?= "freescale/imx8mq-pico-pi.dtb"

#IMAGE_M4LOADER = "imx-m4-demos"
#IMAGE_M4 = "imx8mq_m4_TCM_hello_world.bin imx8mq_m4_TCM_rpmsg_lite_pingpong_rtos_linux_remote.bin imx8mq_m4_TCM_rpmsg_lite_str_echo_rtos.bin"

PREFERRED_PROVIDER_u-boot = "u-boot-edm"
PREFERRED_PROVIDER_u-boot_mx8mq = "u-boot-edm"
PREFERRED_PROVIDER_virtual/bootloader = "u-boot-edm"
PREFERRED_PROVIDER_virtual/bootloader_mx8mq = "u-boot-edm"

UBOOT_CONFIG ??= "sd"
UBOOT_CONFIG[sd] = "pico-imx8m_defconfig,sdcard"
UBOOT_CONFIG[mfgtool] = "pico-imx8m_defconfig"
SPL_BINARY = "spl/u-boot-spl.bin"

# Ensure uEnv.txt will be available at rootfs time
#do_rootfs[depends] += "u-boot-uenv:do_deploy"

#UENV_FILENAME = "uEnv.txt"
#BOOT_SCRIPTS = "${UENV_FILENAME}:uEnv.txt"

# Set DDR FIRMWARE
DDR_FIRMWARE_NAME = "lpddr4_pmu_train_1d_imem.bin lpddr4_pmu_train_1d_dmem.bin lpddr4_pmu_train_2d_imem.bin lpddr4_pmu_train_2d_dmem.bin"

# Set u-boot DTB
UBOOT_DTB_NAME = "pico-imx8m.dtb"

# Set imx-mkimage boot target
IMXBOOT_TARGETS = "flash_evk flash_evk_no_hdmi"

# Set Serial console
SERIAL_CONSOLE = "115200 ttymxc0"

IMAGE_BOOTLOADER = "imx-boot"

BOOT_SPACE = "65536"

LOADADDR = ""
UBOOT_SUFFIX = "bin"
UBOOT_MAKE_TARGET = ""
IMX_BOOT_SEEK = "33"

MACHINE_EXTRA_RRECOMMENDS += " \
  openssh-sftp-server \
  libsocketcan \
  bash hostapd dnsmasq haveged create-ap iptables \
"

MACHINE_FIRMWARE_remove = "linux-firmware-ath10k firmware-imx-brcm"

# to restrict building to sdcard.bz2 ext4 and tar.xz and using the override image_types_fsl_tn
#IMAGE_FSTYPES += "tar.xz ext4 sdcard.bz2"
#IMAGE_FSTYPES_remove = "wic wic.bmap"
#IMAGE_CLASSES += "image_types_fsl_tn"
#IMAGE_CLASSES_remove = "image_types_fsl"

