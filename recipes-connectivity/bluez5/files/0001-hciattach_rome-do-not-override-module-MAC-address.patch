From c5390606a01280d8d5179a8311f7e257d8801129 Mon Sep 17 00:00:00 2001
From: Ray Chang <ray.chang@technexion.com>
Date: Fri, 21 Jun 2019 14:15:14 +0800
Subject: [PATCH 1/3] hciattach_rome: do not override module MAC address

---
 tools/hciattach_rome.c | 53 ++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 51 insertions(+), 2 deletions(-)

diff --git a/tools/hciattach_rome.c b/tools/hciattach_rome.c
index fc843f6..63651e0 100755
--- a/tools/hciattach_rome.c
+++ b/tools/hciattach_rome.c
@@ -62,6 +62,7 @@ unsigned char *phdr_buffer;
 unsigned char *pdata_buffer = NULL;
 patch_info rampatch_patch_info;
 int rome_ver = ROME_VER_UNKNOWN;
+unsigned char bd_addr[BD_ADDR_LEN];
 unsigned char gTlv_type;
 unsigned char gtlv_dwndcfg;
 char *rampatch_file_path;
@@ -318,6 +319,9 @@ int get_vs_hci_event(unsigned char *rsp)
 
         case NVM_ACCESS_CODE:
             fprintf(stderr, "%s: NVM Access Code!!!\n", __FUNCTION__);
+			if((rsp[TAG_NUM_OFFSET] == TAG_NUM_2)&&(rsp[6] == BD_ADDR_LEN)) {
+				memcpy(bd_addr, &rsp[TAG_BDADDR_OFFSET], BD_ADDR_LEN);
+			}
             err = HCI_CMD_SUCCESS;
             break;
         case EDL_SET_BAUDRATE_RSP_EVT:
@@ -1017,8 +1021,11 @@ int rome_get_tlv_file(char *file_path)
             nvm_byte_ptr+=sizeof(tlv_nvm_hdr);
 
             /* Write BD Address */
-            if(nvm_ptr->tag_id == TAG_NUM_2 && read_bd_address(&bdaddr) == 0) {
-                memcpy(nvm_byte_ptr, bdaddr, 6);
+            if(nvm_ptr->tag_id == TAG_NUM_2) {
+                if(read_bd_address(&bdaddr) == 0)
+                    memcpy(nvm_byte_ptr, bdaddr, 6);
+                else
+                    memcpy(nvm_byte_ptr, bd_addr, 6);
                 fprintf(stderr, "Overriding default BD ADDR with user"
                   " programmed BD Address: %02x:%02x:%02x:%02x:%02x:%02x\n",
                     *nvm_byte_ptr, *(nvm_byte_ptr+1), *(nvm_byte_ptr+2),
@@ -1728,6 +1735,46 @@ int read_bd_address(unsigned char *bdaddr)
   return 0;
 }
 
+int rome_hci_bd_address(int fd)
+{
+    int size, err = 0;
+    unsigned char cmd[HCI_MAX_CMD_SIZE];
+    unsigned char rsp[HCI_MAX_EVENT_SIZE];
+    hci_command_hdr *cmd_hdr;
+
+    fprintf(stderr, "%s: HCI READ BD ADDRESS \n", __FUNCTION__);
+
+    memset(cmd, 0x0, HCI_MAX_CMD_SIZE);
+
+    cmd_hdr = (void *) (cmd + 1);
+    cmd[0]  = HCI_COMMAND_PKT;
+    cmd_hdr->opcode = cmd_opcode_pack(HCI_VENDOR_CMD_OGF, HCI_PS_CMD_OCF);
+    cmd_hdr->plen   = 2;
+	cmd[4]  = 0;
+	cmd[5]  = 2;
+
+    /* Total length of the packet to be sent to the Controller */
+    size = (HCI_CMD_IND + HCI_COMMAND_HDR_SIZE + 2);
+
+    fprintf(stderr, "%s: HCI CMD: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\n", __FUNCTION__, cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5]);
+
+    /* Send HCI Command packet to Controller */
+    err = hci_send_vs_cmd(fd, (unsigned char *)cmd, rsp, size);
+    if ( err != size) {
+        fprintf(stderr, "Failed to set the patch info to the Controller!\n");
+        goto error;
+    }
+
+    err = read_hci_event(fd, rsp, HCI_MAX_EVENT_SIZE);
+    if ( err < 0) {
+        fprintf(stderr, "%s: Failed to set patch info on Controller\n", __FUNCTION__);
+        goto error;
+    }
+    fprintf(stderr, "%s: Successfully set patch info on the Controller\n", __FUNCTION__);
+error:
+    return err;
+}
+
 int isSpeedValid(int speed, int *local_baud_rate, int *controller_baud_rate)
 {
     switch(speed) {
@@ -1810,6 +1857,8 @@ int qca_soc_init(int fd, int speed, char *bdaddr)
 
     fprintf(stderr, "%s: Rome Version (0x%08x)\n", __FUNCTION__, rome_ver);
 
+    rome_hci_bd_address(fd);
+
     switch (rome_ver){
         case ROME_VER_1_0:
             {
-- 
2.7.4

