i.MX Linux Yocto Project BSP 4.9.51_8mq_ga Release
=====================================================

The following boards were supported in this release.

   * SOC: NXP i.MX 8MQuad 
	 Machine: TechNexion PICO-IMX8M

 * i.MX Device Tree configurations for each machine
    Each machine files lists the associated device trees for that machine.


Quick Start Guide
-----------------
See the i.MX Yocto Project User's Guide for instructions on installing repo.

First install the i.MX Linux BSP repo
$: repo init -u https://github.com/TechNexion/edm-yocto-bsp.git -b morty_4.9.y_GA -m imx-4.9.51-8mq_ga.xml

Download the Yocto Project Layers:
$: repo sync -j8

If errors on repo init, remove the .repo directory and try repo init again.

Run i.MX Linux Yocto Project Setup:
$: [MACHINE=<machine>] [DISTRO=fsl-imx-<backend>] source ./edm-setup-release.sh -b <build folder>

where
 <machine> specifies the target platform (it corresponds to the .conf file under /conf/machine)
 <build folder> specifies the build folder name

After this your system will be configured to start a Yocto Project build.

Build images
---------------------
Each graphical backend X11, Frame buffer and Wayland must be in a separate build 
directory, so the setup script above must be run for each backend to configure the build 
correctly. In this release two image recipes are provided that work on almost all backends.

DISTROs are new and the way to configure for any backends.  Use DISTRO= instead of the -e on the setup script.
The -e parameter gets converted to the appropriate distro configuration.

Note: DirectFB is no longer supported in i.MX graphic bilds.

   fsl-image-validation-imx provides a gui image without QT.
   fsl-image-qt5-validation-imx provides a Qt5 image

Here are some examples:
(The example uses the imx6qsabresd MACHINE but substitute this with whatever you are using)

Building XWayland image on PICO-IMX8M
------------
  DISTRO=fsl-imx-xwayland MACHINE=pico-imx8m source edm-setup-release.sh â€“b build-xwayland
  bitbake fsl-image-qt5-validation-imx
  
Building Wayland image on PICO-IMX8M
------------
  DISTRO=fsl-imx-wayland MACHINE=pico-imx8m source edm-setup-release.sh -b build-wayland
  bitbake fsl-image-qt5-validation-imx

To run the QT5 examples use the following parameters:
<QT5 example> platform wayland-egl -plugin evdevtouch:/dev/input/event0 --fullscreen

Building with Multilib support
---------------------------
Yocto is able to build libraries for different target optimizations, combing those in one system image,
allowing the user to run both 32-bit and 64-bit applications.
Here is an example to add multilib support (lib32).

In local.conf
- Define multilib targets
require conf/multilib.conf
MULTILIBS = "multilib:lib32"
DEFAULTTUNE_virtclass-multilib-lib32 = "armv7athf-neon"

- 32-bit libraries to be added into the image
IMAGE_INSTALL_append = "lib32-glibc lib32-libgcc lib32-libstdc++"

Hardware Floating Point
-----------------------
This release enables hardware floating point by default.  This feature is enabled in both the machine 
configurations and in the layer.conf. (Some machine files exist in the community meta-fsl-arm without this setting.)
DEFAULTTUNE_mx6 = "cortexa9hf-neon

Software floating point is not supported starting with the 4.1.15_1.0.0_ga release

Restricted Codecs
-----------------
These codecs have contractual restrictions that require separate distribution.

The Manufacturing Tool - MFGTool
--------------------------------
In this release MFGTool uses the community setup.  
To build MFGTool, build the following:

   bitbake fsl-image-mfgtool-initramfs

End User License Agreement
--------------------------
During the NXP Yocto Project Community BSP setup-environment process, the NXP i.MX End User License Agreement (EULA)
is displayed. To continue, users must agree to the conditions of this license. The agreement to the terms allows the
Yocto build to untar packages from the NXP mirror. Please read this license agreement carefully during the
setup process because, once accepted, all further work in the Yocto environment is tied to this accepted agreement.

Chromium
---------
Add Chromium to your Wayland or X11-based image by adding the following lines to local.conf:

# Add Chromium
IMAGE_INSTALL_append = \
    "${@bb.utils.contains('DISTRO_FEATURES', 'wayland', ' chromium-wayland libexif', \
        bb.utils.contains('DISTRO_FEATURES',     'x11', ' chromium libexif', \
                                                        '', d), d)}"
LICENSE_FLAGS_WHITELIST = \
    "${@bb.utils.contains('DISTRO_FEATURES', 'wayland', 'commercial', \
        bb.utils.contains('DISTRO_FEATURES',     'x11', 'commercial', \
                                                        '', d), d)}"

QTWebkit
--------
To start go to /usr/share/qt5/examples/webkitwidgets/browser and run browser

Qt
--
Note that Qt has both a commercial and open source license options.  Make the decision about which license
to use before starting work on custom Qt applications.  Once custom Qt applications are started with an open source
Qt license the work can not be used with a commercial Qt license.  Work with a legal representative to understand
the differences between each license.   Default builds use an open source Qt license.

Note Qt is not supported on i.MX 6UltraLite and i.MX 7Dual. It works on X11 backend only but is not a supported feature.

Systemd
-------
Systemd support is enabled as default but it can be disabled by commenting out the systemd settings in
imx/meta-sdk//conf/distro/include/fsl-imx-preferred-env.inc.
